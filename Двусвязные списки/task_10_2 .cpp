//Создать двусвязный список, содержащий целые числа. Удалить все элементы, совпадающие с последним элементом списка
#include <iostream>
using namespace std;

struct list{ // cтруктура списка
	int inf; // Значение
	list* next; // следующий элемент
	list* prev; // предыдущий элемент
};

void push(list*& h, list*& t, int x) { // функция вставки элемента в конец
	list* r = new list; // создаем новый элемент
	r->inf = x; // присваеваем значение
	r->next = NULL; // всегда последний
	if (!h && !t){ // если список пуст
		r->prev = NULL; // первый элемент
		t = r; // хвост
	}
	else {
		h->prev = r; // r - предыдущий для головы
		r->next = h; // Голова - следующая для r
	}
	h = r; // r теперь голова
}

void print(list* h, list* t) { // функция печати элементов списка
	list* p = t; // указатель на хвост
	cout << "Новый лист: ";
	while (p){ // пока не дошли до конца списка
		cout << p->inf << " "; // печать очередного элемента
		p = p->prev; // переход к следующему элементу
	}
}

void deleteNode(list*& h, list*& t, list* r) { // функция удаления элемента после r
	if (r == h && r == t) // если единственный элемент списка
		h = t = NULL;
	else if (r == h){ // если удаляем голову списка
		h = h->next; // сдвигаем голову
		h->prev = NULL;
	}
	else if (r == t){ // если удаляем хвост списка
		t = t->prev; // сдвигаем хвост
		t->next = NULL;
	}
	else { // если это не голова и не хвост и не единственный элемент
		r->next->prev = r->prev; // для следующего от r предыдущим становится r->prev
		r->prev->next = r->next; // для прелущего от r следующим становится r->next
	}
	delete r; // удаляем r
}

list* find(list* h, list* t, int x) { // функция поиска элемента в списке
	list* p = h; // указатель на голову
	while (p){ // пока не дошли до конца списка
		if (p->inf == x) break; // если нашли, прекращаем цикл
		p = p->next; // переход к следующему элементу
	}
	return p; // возвращаем указатель на элемент
}

int main(){
	setlocale(LC_ALL, "RUS"); // подключение русской раскладки
	list* head = NULL, * tail = NULL; // объявление списка
	int n = 0, temp = 0, last = 0; // объявление переменных
	cout << "Кол-во элементов: ";
	cin >> n; // ввод размера списка
	for (int i = 0; i < n; i++) { // проход списка
		cout << "Элемент[" << i << "] = ";
		cin >> temp; // Ввод очередного элемента
		push(head, tail, temp); // добавление в конец
	}
	last = head->inf; // так как мы добавляем в начало, то последний элемент - первый
	list* ptr = NULL; // объявление переменной
	for (int i = 0; i < n; i++){ // проход списка
		ptr = find(head, tail, last); // Находим совпадающий с последним элемент
		if (ptr) // если нашли
			deleteNode(head, tail, ptr); // удаляем его
		else // если не нашли
			break; // выходим из цикла
	}
	print(head, tail); // вывод на экран
	return 0;
}